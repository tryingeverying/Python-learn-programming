			基础语法

'注释':''
	单行注释#开头
	多行注释'''开头结尾(非idle里)

x//y：
	商的整数部分(整除)

0b：
	二进制符号
0o：
	八进制符号
0x：
	十六进制符号
bin()：
	其他进制换二进制
int()：
	其他进制换十进制
hex()：
	其他进制换十六进制
Oct()：
	其他进制换八进制

bool类型：
	判断对错(Flase：0/空内容， Ture)

'''表示字符串类形'''(idle；里)
	回车不会运行可以实行换行
	
\n 换行
\r 回车

字符串前加 r\R 后边的转义字符会失效

'列表(str)\元组(tuple) 里提取单个元素返回字符串，用[a':'b]返回列表，列表里没有减法。'

'ord()':''
	返回ASCII码

'集合{}':''
	是无序的，不支持位置索引
	元素有唯一性
	- (求差集)
	& (求交集)
	| (求并集)
	空集合 set()
	
'字典{key1':'value1,key2:value2,...} :'
	是无序的，不支持位置索引，通过key访问value
	不能有同样的key
	key：不可变的类型，(起码列表不可以)
	
序列(有序的)：
	str，str，tuple
	
'变量命名规则':''
	数字，字母，下划线(不能以数字开头)
	
int,float,str，tuple (不可改变内存地址) 值类型
str,set,dict (可改变内存地址) 引用类型

字典里的in运算是针对key的

is判断的是内存地址

isinstance()：
	判断类型isinstance(需判断变量，判断类型(可为元组))

not>and>or (运算优先级) 

pass 占位语句，不知道写什么时用

如果输入的是数字要在下一行用int()把输入变量给改一下，python默认输入的为str类型

'in用法':''
	in左边的表达式符合右边的集合则判定为真

print最后添加end='',则输出不换行

'break':'结束break后的部分及以后break所在的所有循环'
'continue':'仅仅结束本次循环'

range(起始,长度,步长(不写默认是1))

'str切片':''
	str[起始,长度(len()),步长(不写默认是1)]
	
'普通文件夹变包':''
	需在文件夹内添加一个__init__.py。

'__init__.py':'	'
	导入时会自动运行
	内__all__=[],可选择要导入的模块
	
round(变量,小数点保留位数)
		
'同步赋值(序列解包)':''
	<变量1>,...<变量N>=<表达式1>,...<表达式N>



			面向对象
			
类(class)：
	封装一系列的变量和函数
	命名建议首字母建议大写
	类里的方法(函数)，括号里要加self
	引用类里的变量(a)要用self.变量(a)
	类里不能运行

构造函数：
'	def __init__(self)':''
		pass
	不能返回除none的东西
	初始化对象的属性
	
类变量：
	class中的变量

实例变量：
	用class而产生的对象的变量

实例方法：
	类中供对象调用的方法
	第一个形参要为self
	方法里变量前加self.变量变成实例变量,可供对象使用。

self：
	和对象有关，那个对象调用了self的方法，self就指代谁
	即self代表的是实例不是类

实例方法里调用类变量方法：
	用(类名.需调用变量)
	用(self.__class__.需调用变量)
	
类方法：
	操作类变量
	正常定义上一行加@classmethod(self建议改为cls)

静态方法：
	正常定义上一行加@staticmethod(形参无要求)
	对象和类都可调用，也可以调用类变量，

方法\变量前加双下划线(__)方法变为私有方法\变量，不可通过外部进行更改。

子类调用父类方法：
	1.父类名.需调用方法
	2.用super函数。super(当前类,self).需调用方法
	
子类方法与调用父类方法同名时，会优先执行子类方法


			正则表达式
			
'正则表达式(一个特殊的字符串序列)':''
	1.判断一个字符串与所设定的正则表达式是否匹配
	2.快速检索文本，实现一些替换文本的操作

'index()':''
	变量.index('需检测量')>-1
	判段变量中是否含需检测值

're.findfall()':''
	re.findfall('正则表达式',变量)
	返回变量中的正则表达式所构成的列表

'字符集':''
	'定界字符[或关系的需检索的内容]定界字符'
	'定界字符[^或关系的需检索的内容]定界字符',表示否运算

'概括字符集':''
	\d；[0-9]
'	\D':'^^[0-9]'
'	\w':'单词字符(无空格)'
'	\W':'^单词字符'
'	\s':'空白字符(\n,\r)'
'	\S':'^空白字符'
'	. ':'除\n外的所有字符'
	
'数字词':''
	单个字符{需重复次数}
	{a,b}从a到b
'	{}?':'非贪婪'
	
'*':''
	之前的字符匹配0次或无限次
	
'+':''
	之前的字符匹配1次或无限次

'?':''
	之前的字符匹配0次或1次
	
边界匹配：
'	^':'从头开始匹配'
'	$':'从尾开始匹配'
'	^[]$':'必须符合[]范围'

'组':''
'	()':'且关系'
'	[]':'或关系'
	
'第三个参数':''
'	re.I':'不区分大小写'
'	re.S':'改变.的运算行为使之可以匹配\n'
'	|':'前后都执行'
	
're.sub()':''
	替换
	re.sub(需替换量,替换量,原字符串)
	
'group()':''
	m.group(N) 返回第N组括号匹配的字符
	


			JSON
			
json里字符串必须用""
	
'json.loads()':''
	把json的数据类型转换成python数据类型(反序列化)
	
'json.dump()':''
	把python数据类型(字典)转换成json的数据类型(序列化)
	
'enum':'枚举'
from enum import Enum
	不可更改
	防止出现相同标签
	
.name() 获取枚举的名字
.value() 获取枚举的值

global 全局变量声明，会改变全局变量的值
nonlocal 将变量声明为外层(上一层)变量(因为python语法原因，若在该层函数中无定义则取上一层找)


				数据可视化

'np.random.randn(n)':''
	返回n个数字(数字符合正态分布)
	
'np.random.randint(n,size=m).reshape(x,y)':'	'
	在0-n之间选取m个数字构成x*y的数组
	
'np.array()':''
	创建数组
'np.mat()':''
	创建矩阵
	
'pd.Series()':''
	创建序列
	
import webbrowser
link='所需链接'
webbrowser.open(link)
#复制所需数据
df=pd.read_clipboard()
#输出df即可得到所复制的数据

'文件名.iloc(n':'m,x:y):'
	返回文件的n到m行(无m行)，x到y列(无y列)

'文件名.loc(n':'m,x:y):'
	返回文件的n到m行(有m行)，x到y列(有y列)
	
'文件名.head(n)':''
	返回文件前n行
	
jupyter notebook 中访问路径用的是/而非\,与系统默认路径方式不同
	
				爬虫代码
				
爬京东
import requests
'url = 'https':'//phat.jd.com/10-28.html''
'try':''
	r=requests.get(url)
	r.raise_for_status()
	r.encoding=r.apparent_encoding
'	print(r.text[':'1000])'
'except':''
	print('爬取失败')


爬亚马逊  #有反爬虫的
import requests
'url='https':'//www.amazon.cn/dp/B07PCPQ7HX/ref=sr_1_5?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&keywords=%E6%9E%81%E7%AE%80&qid=1584016388&s=books&sr=1-5''
'try':''
'	kv={'user-agent'':''Mozilla/5.0'} #更改访问头部信息'
	r=requests.get(url,headers=kv)
	r.raise_for_status()
	r.encoding=r.apparent_encoding
'	print(r.text[':'1000])'
'except':''
	print('爬取失败')

爬百度搜索
import requests
keyword='python'  #搜索关键字
'try':''
'	kv={'wb'':'keyword} #360是把wb改成q'
'	r=requests.get('http':'//www.baidu.com/s',params=kv)'
	print(r.request.url)	
	r.raise_for_status()
	print(len(r.text))
'except':''
	print('爬取失败')
	
爬图片
import requests
import os
'url='http':'//img0.dili360.com/pic/2020/01/03/5e0ee523da2ad0t04429317.jpg''
'root='F':'//Python//''
path=root+url.split('/')[-1]
'try':''
'	if not os.path.exists(root)':''
		os.mkdir(root)
'	if not os.path.exists(path)':''
		r=requests.get(url)
'		with open(path,'wb') as f':''
			f.write(r.content)
			f.close()
			print('文件保存成功')
'	else':''
		print('文件已存在')
'except':''
	print('爬取失败')
	
	
	
	

	
	
	
	
	

	




















